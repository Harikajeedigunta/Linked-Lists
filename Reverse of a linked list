C++ Code:
1.Iterative Method:
A. Brute Force:
#include<iostream>
#include<stack>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
void insertNewNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node{value,nullptr};
    if(head==NULL)
    {
        head=newnode;
        return;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
void reverseList(Node* &head)
{
    stack<int> st;
    Node* temp=head;
    while(temp!=NULL)
    {
        st.push(temp->data);
        temp=temp->next;
    }
    temp=head;
    while(temp!=NULL)
    {
        temp->data=st.top();
        st.pop();
        temp=temp->next;
    }
}
void displayList(Node* head)
{
    Node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"nullptr"<<endl;
}
int main()
{
    int n,val;
    cin>>n;
    Node* head=nullptr;
    for(int i=0;i<n;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(head,val);
    };
    reverseList(head);
    displayList(head);
}
Time Complexity:O(N)
Space Complexity:O(N)

B.Optimized Method:
#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
void insertNewNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node{value,nullptr};
    if(head==NULL)
    {
        head=newnode;
        return;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
void reverseList(Node* &head)
{
    Node* temp=head;
    Node* prev=nullptr;
    Node* next=nullptr;
    while(temp!=NULL)
    {
        next=temp->next;
        temp->next=prev;
        prev=temp;
        temp=next;
    }
    head=prev;
}
void printList(Node* head)
{
    Node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"nullptr"<<endl;
}
int main()
{
    int n,val;
    cin>>n;
    Node* head=nullptr;
    for(int i=0;i<n;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(head,val);
    }
    reverseList(head);
    printList(head);
}
Time Complexity:O(N)
Space Complexity:O(1)

Input:
5
1 2 3 4 5

Output:
5->4->3->2->1->nullptr
