C++ Code:
Method 1:Brute Force
#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
void insertNewNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node{value,nullptr};
    if(head==NULL)
    {
        head=newnode;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
Node* deleteNthNodeFromEnd(Node* head,int n)
{
    if(head==NULL)
    {
        return NULL;
    }
    int cnt=0;
    Node* temp=head;
    while(temp!=NULL)
    {
        cnt++;
        temp=temp->next;
    }
    if(cnt==n)
    {
        Node* newhead=head->next;
        delete(head);
        return newhead;
    }
    int res=cnt-n;
    temp=head;
    while(temp!=NULL)
    {
        res--;
        if(res==0)
        {
            break;
        }
        temp=temp->next;
    }
    Node* delNode=temp->next;
    temp->next=temp->next->next;
    delete(delNode);
    return head;
}
void printList(Node* head)
{
    Node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<nullptr<<endl;
}
int main()
{
    int n,val,k;
    cin>>n>>k;
    Node* head=nullptr;
    for(int i=0;i<n;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(head,val);
    }
    head=deleteNthNodeFromEnd(head,k);
    printList(head);
}

Method 2:Optimized approach
#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
void insertNewNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node{value,nullptr};
    if(head==NULL)
    {
        head=newnode;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
Node* deleteNthNodeFromEnd(Node* head,int n)
{
    Node* fast=head;
    for(int i=0;i<n;i++)
    {
        if(fast==NULL)
        {
            return head;
        }
        fast=fast->next;
    }
    if(fast==NULL)
    {
        Node* newhead=head->next;
        delete(head);
        return newhead;
    }
    Node* slow=head;
    while(fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next;
    }
    Node* delnode=slow->next;
    slow->next=slow->next->next;
    delete(delnode);
    return head;
}
void displayList(Node* head)
{
    Node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<nullptr<<endl;
}
int main()
{
    int n,val,k;
    cin>>n>>k;
    Node* head=nullptr;
    for(int i=0;i<n;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(head,val);
    }
    head=deleteNthNodeFromEnd(head,k);
    displayList(head);
}

Input:
5 2
1 2 3 4 5

Output:
1->2->3->5->nullptr
