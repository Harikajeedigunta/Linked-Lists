C++ Code:
Brute Force:
#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
void insertNewNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node{value,nullptr};
    if(head==NULL)
    {
        head=newnode;
        return;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
void segregateOddEvenNodes(Node* head)
{
    Node* temp=head;
    while(temp!=NULL && temp->next!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next->next;
    }
    if(temp!=NULL)
    {
        cout<<temp->data<<"->";
    }
    temp=head->next;
    while(temp!=NULL && temp->next!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next->next;
    }
    if(temp!=NULL)
    {
        cout<<temp->data<<"->";
    }
    cout<<"nullptr"<<endl;
}
int main()
{
    int n,val;
    cin>>n;
    Node* head=nullptr;
    for(int i=0;i<n;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(head,val);
    }
    segregateOddEvenNodes(head);
}

Optimized Approach:

#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
void insertNewNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node{value,nullptr};
    if(head==NULL)
    {
        head=newnode;
        return;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
Node* segregateOddEvenNodes(Node* head)
{
    Node* odd=head;
    Node* even_head=head->next;
    Node* even=head->next;
    while(even!=NULL && even->next!=NULL)
    {
        odd->next=odd->next->next;
        even->next=even->next->next;
        odd=odd->next;
        even=even->next;
    }
    odd->next=even_head;
    return head;
}
void printList(Node* head)
{
    Node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"nullptr"<<endl;
}
int main()
{
    int n,val;
    cin>>n;
    Node* head=nullptr;
    for(int i=0;i<n;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(head,val);
    }
    segregateOddEvenNodes(head);
    printList(head);
}

Input:
5
1 2 3 4 5

Output:
1->3->5->2->4->nullptr
