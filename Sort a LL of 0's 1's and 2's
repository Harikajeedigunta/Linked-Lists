C++ Code:
Method 1:Brute Force
#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
void insertNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node{value,nullptr};
    if(head==NULL)
    {
        head=newnode;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
void sortList(Node* head)
{
    int cnt0=0,cnt1=0,cnt2=0;
    Node* temp=head;
    while(temp!=NULL)
    {
        if(temp->data==0) cnt0++;
        else if(temp->data==1) cnt1++;
        else cnt2++;
        temp=temp->next;
    }
    temp=head;
    while(temp!=NULL)
    {
        if(cnt0)
        {
            temp->data=0;
            cnt0--;
        }
        else if(cnt1)
        {
            temp->data=1;
            cnt1--;
        }
        else
        {
            temp->data=2;
            cnt2--;
        }
        temp=temp->next;
    }
}
void printList(Node* head)
{
    Node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<nullptr<<endl;
}
int main()
{
    int n,val;
    cin>>n;
    Node* head=nullptr;
    for(int i=0;i<n;i++)
    {
        cin>>val;
        insertNodeAtEnd(head,val);
    }
    sortList(head);
    printList(head);
}

Method 2:Optimized Approach
#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node* next;
    Node(int val)
    {
        data=val;
        next=nullptr;
    }
};
void insertNewNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node(value);
    if(head==NULL)
    {
        head=newnode;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
Node* sortList(Node* head)
{
    Node* zerohead=new Node(-1);
    Node* onehead=new Node(-1);
    Node* twohead=new Node(-1);
    Node* zero=zerohead;
    Node* one=onehead;
    Node* two=twohead;
    Node* temp=head;
    while(temp!=NULL)
    {
        if(temp->data==0)
        {
            zero->next=temp;
            zero=temp;
        }
        else if(temp->data==1)
        {
            one->next=temp;
            one=temp;
        }
        else
        {
            two->next=temp;
            two=temp;
        }
        temp=temp->next;
    }
    zero->next=(onehead->next)? onehead->next:twohead->next;
    one->next=twohead->next;
    two->next=nullptr;
    Node* newhead=zerohead->next;
    delete zerohead;
    delete onehead;
    delete twohead;
    return newhead;
}
void printList(Node* head)
{
    Node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<nullptr<<endl;
}
int main()
{
    int n,val;
    cin>>n;
    Node* head=nullptr;
    for(int i=0;i<n;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(head,val);
    }
    head=sortList(head);
    printList(head);
}

Input:
5
1 0 2 0 1

Output:
0->0->1->1->2->nullptr

