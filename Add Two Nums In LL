C++ Code:
Method1:Brute Force
#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
void insertNewNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node{value,nullptr};
    if(head==NULL)
    {
        head=newnode;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
long long ListToNum(Node* head)
{
    if(head==nullptr) return 0;
    long long num=0;
    int place=1;
    while(head!=NULL)
    {
        num+=head->data*place;
        place*=10;
        head=head->next;
    }
    return num;
}
Node* NumToList(long long num)
{
    if(num==0) return new Node{0};
    Node* head=NULL;
    while(num>0)
    {
        insertNewNodeAtEnd(head,num%10);
        num/=10;
    }
    return head;
}
void displayList(Node* head)
{
    Node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"nullptr"<<endl;
}
int main()
{
    Node* l1=nullptr;
    Node* l2=nullptr;
    int n1,n2,val;
    cin>>n1;
    for(int i=0;i<n1;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(l1,val);
    }
    cin>>n2;
    for(int i=0;i<n2;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(l2,val);
    }
    long long num1=ListToNum(l1);
    long long num2=ListToNum(l2);
    long long sum=num1+num2;
    Node* result=NumToList(sum);
    displayList(result);
}

Method 2:Optimized
#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
void insertNewNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node{value,nullptr};
    if(head==NULL)
    {
        head=newnode;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
Node* sumofLists(Node* l1,Node* l2)
{
    Node* dummyhead=new Node{-1};
    Node* temp=dummyhead;
    Node* temp1=l1;
    Node* temp2=l2;
    int carry=0;
    while(temp1!=NULL || temp2!=NULL)
    {
        int sum=carry;
        if(temp1) sum+=temp1->data;
        if(temp2) sum+=temp2->data;
        Node* newnode=new Node{sum%10};
        temp->next=newnode;
        temp=temp->next;
        carry=sum/10;
        if(temp1) temp1=temp1->next;
        if(temp2) temp2=temp2->next;
    }
    if(carry)
    {
        Node* newnode=new Node{carry};
        temp->next=newnode;
    }
    return dummyhead->next;
}
void displayList(Node* head)
{
    Node* temp=head;
    while(temp!=NULL)
    {
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"nullptr"<<endl;
}
int main()
{
    int n1,n2,val;
    Node* l1=NULL;
    Node* l2=NULL;
    cin>>n1;
    for(int i=0;i<n1;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(l1,val);
    }
    cin>>n2;
    for(int i=0;i<n2;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(l2,val);
    }
    Node* head=sumofLists(l1,l2);
    displayList(head);
}

Input:
3
1 2 3
3
1 2 3

Output:
2->4->6->nullptr
