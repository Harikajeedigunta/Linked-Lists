C++ Code:
Method1:Brute Force-->using stack
#include<iostream>
#include<stack>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
void insertNewNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node{value,nullptr};
    if(head==NULL)
    {
        head=newnode;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
bool isPalindrome(Node* head)
{
    if(head==NULL)
    {
        return false;
    }
    if(head->next==NULL)
    {
        return true;
    }
    stack<int>st;
    Node* temp=head;
    while(temp!=NULL)
    {
        st.push(temp->data);
        temp=temp->next;
    }
    temp=head;
    while(temp!=NULL && !st.empty())
    {
        if(temp->data!=st.top())
        {
            return false;
        }
        st.pop();
        temp=temp->next;
    }
    return true;
}
int main()
{
    int n,val;
    cin>>n;
    Node* head=nullptr;
    for(int i=0;i<n;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(head,val);
    }
    bool res=isPalindrome(head);
    if(res)
    {
        cout<<"Palindrome"<<endl;
    }
    else
    {
        cout<<"Not Palindrome"<<endl;
    }
}

Method2:Optimized 
#include<iostream>
using namespace std;
struct Node
{
    int data;
    Node* next;
};
void insertNewNodeAtEnd(Node* &head,int value)
{
    Node* newnode=new Node{value,nullptr};
    if(head==NULL)
    {
        head=newnode;
    }
    else
    {
        Node* temp=head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next=newnode;
    }
}
Node* reverseList(Node* head)
{
    Node* temp=head;
    Node* next=nullptr;
    Node* prev=nullptr;
    while(temp!=NULL)
    {
        next=temp->next;
        temp->next=prev;
        prev=temp;
        temp=next;
    }
    head=prev;
    return head;
}
bool isPalindrome(Node* head)
{
    if(head==NULL) return false;
    if(head->next==NULL) return true;
    Node* fastp=head;
    Node* slowp=head;
    while(fastp!=NULL && fastp->next!=NULL)
    {
        fastp=fastp->next->next;
        slowp=slowp->next;
    }
    if(fastp!=NULL)
    {
        slowp=slowp->next;
    }
    Node* newhead=reverseList(slowp);
    Node* first=head;
    Node* second=newhead;
    while(second!=NULL)
    {
        if(first->data!=second->data)
        {
            reverseList(newhead);
            return false;
        }
        first=first->next;
        second=second->next;
    }
    reverseList(newhead);
    return true;
}
int main()
{
    int n,val;
    cin>>n;
    Node* head=nullptr;
    for(int i=0;i<n;i++)
    {
        cin>>val;
        insertNewNodeAtEnd(head,val);
    }
    bool res=isPalindrome(head);
    if(res)
    {
        cout<<"Palindrome"<<endl;
    }
    else
    {
        cout<<"Not Palindrome"<<endl;
    }
}
Input:
5
3 7 5 7 3

Output:
Palindrome
